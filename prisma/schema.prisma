// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Carousel {
    id        String   @id @default(uuid())
    imageUrl  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Contact {
    id        String   @id @default(uuid())
    name      String
    email     String
    message   String
    userId    String
    phone     String
    user      User     @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

model User {
    id                String        @id @default(uuid())
    email             String        @unique
    fullName          String        @map("name")
    password          String
    isVerified        Boolean       @default(false)
    role              UserRole      @default(USER)
    phoneNumber       String?
    address           String?
    motherName        String?
    fatherName        String?
    parentContact     String?
    schoolCollegeName String?
    profilePicUrl     String?
    createdAt         DateTime      @default(now())
    updatedAt         DateTime      @updatedAt
    contacts          Contact[]     @relation("UserContacts")
    subjects          UserSubject[]
    PdfFile           PdfFile[]
    Practice          Practice[]
}

model Subject {
    id          String        @id @default(uuid())
    name        String        @unique
    description String?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    users       UserSubject[]
    Practice    Practice[]
}

model UserSubject {
    id        String   @id @default(uuid())
    userId    String
    subjectId String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
}

model PdfFile {
    id            String   @id @default(uuid())
    title         String
    description   String?
    filename      String // Original filename
    path          String // File path on server
    mimetype      String
    size          Int // File size in bytes
    downloadCount Int      @default(0)
    uploadedBy    User     @relation(fields: [userId], references: [id])
    userId        String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Practice {
    id             String             @id @default(uuid())
    userId         String
    subjectId      String
    difficulty     Difficulty
    score          Int                @default(0)
    totalQuestions Int
    completed      Boolean            @default(false)
    user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    subject        Subject            @relation(fields: [subjectId], references: [id])
    questions      PracticeQuestion[]
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt
}

model PracticeQuestion {
    id          String   @id @default(uuid())
    practiceId  String
    question    String
    options     Json // Array of options with correct answer marked
    explanation String
    isCorrect   Boolean? // Null until answered
    practice    Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
}

enum Difficulty {
    EASY
    MEDIUM
    HARD
}

enum UserRole {
    ADMIN
    USER
}
