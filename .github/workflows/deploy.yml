name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Build
        working-directory: ./backend
        run: npm run build

      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            # Create or update backend repository
            if [ ! -d "/var/www/sei-institute/backend" ]; then
              mkdir -p /var/www/sei-institute/backend
              git clone --single-branch --branch main https://github.com/${{ github.repository }}.git /var/www/sei-institute/tmp-repo
              cp -r /var/www/sei-institute/tmp-repo/backend/* /var/www/sei-institute/backend/
              rm -rf /var/www/sei-institute/tmp-repo
            else
              cd /var/www/sei-institute
              git clone --single-branch --branch main https://github.com/${{ github.repository }}.git /var/www/sei-institute/tmp-repo
              cp -r /var/www/sei-institute/tmp-repo/backend/* /var/www/sei-institute/backend/
              rm -rf /var/www/sei-institute/tmp-repo
            fi

            # Setup PostgreSQL database and user (with password auth method)
            if command -v psql &> /dev/null; then
              # Create user with password if it doesn't exist
              sudo -u postgres psql -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'sei') THEN CREATE USER sei WITH PASSWORD 'sei'; END IF; END \$\$;" || true
              
              # Create database (drop if exists already)
              sudo -u postgres psql -c "DROP DATABASE IF EXISTS sei;" || true
              sudo -u postgres psql -c "CREATE DATABASE sei;" || true
              
              # Grant privileges
              sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sei TO sei;" || true
              sudo -u postgres psql -d sei -c "GRANT ALL PRIVILEGES ON SCHEMA public TO sei;" || true
              sudo -u postgres psql -d sei -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO sei;" || true
              sudo -u postgres psql -d sei -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO sei;" || true
              sudo -u postgres psql -d sei -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO sei;" || true
              sudo -u postgres psql -d sei -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO sei;" || true
              
              # Modify pg_hba.conf to use password authentication for local connections
              sudo sh -c 'echo "local all sei md5" >> /etc/postgresql/*/main/pg_hba.conf'
              sudo sh -c 'echo "host all sei 127.0.0.1/32 md5" >> /etc/postgresql/*/main/pg_hba.conf'
              sudo service postgresql restart
            fi

            # Create Nginx configuration for API subdomain if it doesn't exist
            if [ ! -f "/etc/nginx/sites-available/api.seiinstitute.com" ]; then
              cat > /etc/nginx/sites-available/api.seiinstitute.com <<'EOD'
            server {
                listen 80;
                server_name api.seiinstitute.com;

                location / {
                    proxy_pass http://localhost:9000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOD
              
              # Enable the site and restart nginx
              ln -sf /etc/nginx/sites-available/api.seiinstitute.com /etc/nginx/sites-enabled/
              nginx -t && systemctl restart nginx
            fi

            # Set environment variables with simplified database credentials
            cat > /var/www/sei-institute/backend/.env <<'EOD'
            PORT=9000
            DATABASE_URL="postgresql://sei:sei@127.0.0.1:5432/sei?schema=public"
            CLIENT_ENDPOINT="https://seiinstitute.com"
            JWT_SECRET="mahatohariomsfadfnasldkjf"
            ACCESS_TOKEN_EXPIRES="1d"
            REFRESH_TOKEN_EXPIRES="7d"
            NODE_ENV="production"
            HUGGING_FACE_KEY="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"
            API_URL="http://api.seiinstitute.com"
            EOD

            # Install dependencies
            cd /var/www/sei-institute/backend
            npm ci

            # Ensure Prisma schema path exists
            if [ ! -d "/var/www/sei-institute/backend/prisma" ]; then
              echo "Error: Missing prisma directory. Creating..."
              mkdir -p /var/www/sei-institute/backend/prisma
            fi

            # Run Prisma commands with explicit schema path
            cd /var/www/sei-institute/backend
            echo "Generating Prisma client..."
            npx prisma generate --schema=./prisma/schema.prisma

            # Force reset database on first run or migration issues
            if [ ! -f "/var/www/sei-institute/backend/.migration_done" ]; then
              echo "Performing initial migration..."
              npx prisma migrate reset --force --schema=./prisma/schema.prisma || true
              touch /var/www/sei-institute/backend/.migration_done
            else
              echo "Running regular migration..."
              npx prisma migrate deploy --schema=./prisma/schema.prisma
            fi

            # Build the application
            npm run build

            # Restart or start the backend with PM2
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            cd /var/www/sei-institute/backend
            pm2 describe backend > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              pm2 restart backend
            else
              pm2 start build/server.js --name backend
            fi
            pm2 save

            # Verify deployment
            echo "Checking backend status..."
            pm2 status
            echo "Verifying database connection..."
            cd /var/www/sei-institute/backend && npx prisma db pull --schema=./prisma/schema.prisma --force || true
