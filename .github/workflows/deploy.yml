name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            # Create or update backend repository
            if [ ! -d "/var/www/sei-institute/backend" ]; then
              mkdir -p /var/www/sei-institute/backend
              git clone --single-branch --branch main https://github.com/${{ github.repository }}.git /var/www/sei-institute/backend
            else
              cd /var/www/sei-institute/backend
              git fetch origin
              git reset --hard origin/main
            fi

            # Simple database setup (only run if PostgreSQL is available)
            if command -v psql &> /dev/null; then
              # Create user and database if they don't exist
              sudo -u postgres psql -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'sei_prod_user') THEN CREATE USER sei_prod_user WITH PASSWORD 'StrongP@ssw0rd123'; END IF; END \$\$;"
              sudo -u postgres psql -c "SELECT 'CREATE DATABASE sei_institute' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'sei_institute');"
              sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sei_institute TO sei_prod_user;"
            fi

            # Create Nginx configuration for API subdomain if it doesn't exist
            if [ ! -f "/etc/nginx/sites-available/api.seiinstitute.com" ]; then
              cat > /etc/nginx/sites-available/api.seiinstitute.com <<EOD
            server {
                listen 80;
                server_name api.seiinstitute.com;

                location / {
                    proxy_pass http://localhost:9000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOD
              
              # Enable the site and restart nginx if available
              if command -v nginx &> /dev/null; then
                ln -sf /etc/nginx/sites-available/api.seiinstitute.com /etc/nginx/sites-enabled/
                nginx -t && systemctl restart nginx
              fi
            fi

            # Set environment variables in .env file
            cat > /var/www/sei-institute/backend/.env <<EOD
            PORT=9000
            DATABASE_URL="postgresql://sei_prod_user:StrongP@ssw0rd123@127.0.0.1:5432/sei_institute?schema=public"
            CLIENT_ENDPOINT="https://seiinstitute.com"
            JWT_SECRET="mahatohariomsfadfnasldkjf"
            ACCESS_TOKEN_EXPIRES="1d"
            REFRESH_TOKEN_EXPIRES="7d"
            NODE_ENV="production"
            HUGGING_FACE_KEY="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"
            API_URL="http://api.seiinstitute.com"
            EOD

            # Install dependencies and run Prisma
            cd /var/www/sei-institute/backend
            npm ci
            npx prisma generate
            npx prisma migrate deploy

            # Build and start application using PM2
            npm run build

            # Ensure PM2 is installed
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi

            # Start/restart the backend service
            cd /var/www/sei-institute/backend
            pm2 describe backend > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              pm2 restart backend
            else
              pm2 start build/server.js --name backend
            fi
            pm2 save

            # Verify deployment
            if [ -d "/var/www/sei-institute/backend/build" ]; then
              echo "Build directory exists, deployment successful"
            else
              echo "ERROR: Build directory does not exist, deployment failed"
              exit 1
            fi
