name: Deploy Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate .env file from secrets
        run: |
          # Create .env file from secrets
          echo "DATABASE_URL=${{ secrets.BACKEND_DATABASE_URL }}" > .env.production
          echo "JWT_SECRET=${{ secrets.BACKEND_JWT_SECRET }}" >> .env.production
          echo "PORT=${{ secrets.BACKEND_PORT || '3333' }}" >> .env.production
          echo "NODE_ENV=production" >> .env.production
          # Add other environment variables as needed
          echo "API_URL=${{ secrets.BACKEND_API_URL }}" >> .env.production
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env.production

          # Display .env file content (without sensitive data)
          echo "Generated .env.production file (with sensitive data masked):"
          cat .env.production | sed 's/=.*/=********/'

      - name: Build application
        run: npm run build

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H 37.27.247.208 >> ~/.ssh/known_hosts

      - name: Deploy to server
        run: |
          # Create a temporary deployment directory
          ssh root@37.27.247.208 'mkdir -p /tmp/backend-deploy'

          # Copy built files to server
          rsync -avz --delete ./build/ ./package.json ./package-lock.json ./prisma/ root@37.27.247.208:/tmp/backend-deploy/

          # Copy .env.production file
          rsync -avz ./.env.production root@37.27.247.208:/tmp/backend-deploy/

          # Deploy on server
          ssh root@37.27.247.208 'cd /tmp/backend-deploy && \
            # Install production dependencies
            npm ci --production && \
            # Run prisma generate if needed
            npx prisma generate && \
            # Stop existing service if it exists
            [ -f /etc/systemd/system/backend.service ] && systemctl stop backend || true && \
            # Move to final location
            mkdir -p /opt/sei-institute/backend && \
            rm -rf /opt/sei-institute/backend/* && \
            cp -r /tmp/backend-deploy/* /opt/sei-institute/backend/ && \
            # Copy environment file
            cp /tmp/backend-deploy/.env.production /opt/sei-institute/backend/.env && \
            # Setup systemd service if it doesn't exist
            if [ ! -f /etc/systemd/system/backend.service ]; then \
              echo "[Unit]
              Description=SEI Institute Backend Service
              After=network.target

              [Service]
              User=root
              WorkingDirectory=/opt/sei-institute/backend
              ExecStart=/usr/bin/npm start
              Restart=always
              Environment=NODE_ENV=production

              [Install]
              WantedBy=multi-user.target" > /etc/systemd/system/backend.service && \
              systemctl daemon-reload; \
            fi && \
            # Start service
            systemctl enable backend && \
            systemctl start backend && \
            # Clean up
            rm -rf /tmp/backend-deploy'

      - name: Verify deployment
        run: |
          # Wait for service to start
          sleep 5
          # Check if service is running
          ssh root@37.27.247.208 'systemctl status backend'
