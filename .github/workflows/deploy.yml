name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            set -e
            DEPLOY_DIR="/var/www/sei-institute/backend"

            # Fix ownership of the parent directory
            mkdir -p /var/www
            chown -R root:root /var/www
            echo "Ownership of /var/www fixed:"
            ls -ld /var/www

            # Mark the deployment directory as safe for Git globally (before any Git commands)
            git config --global --add safe.directory $DEPLOY_DIR
            echo "Safe directory set: $DEPLOY_DIR"

            # Clone or update repository
            if [ ! -d "$DEPLOY_DIR" ]; then
              echo "Cloning repository to $DEPLOY_DIR..."
              git clone --single-branch --branch main https://github.com/${{ github.repository }}.git $DEPLOY_DIR
            else
              echo "Updating repository in $DEPLOY_DIR..."
              cd $DEPLOY_DIR
              git fetch origin
              git reset --hard origin/main
            fi

            # Install PostgreSQL if not present
            if ! command -v psql &> /dev/null; then
              apt-get update
              apt-get install -y postgresql postgresql-contrib
              systemctl start postgresql
              systemctl enable postgresql
            fi

            # Configure PostgreSQL for trust authentication
            if ! grep -q "host all all 127.0.0.1/32 trust" /etc/postgresql/*/main/pg_hba.conf; then
              echo "host all all 127.0.0.1/32 trust" >> /etc/postgresql/*/main/pg_hba.conf
              systemctl restart postgresql
            fi

            # Setup PostgreSQL database and user
            psql -U postgres -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'sei') THEN CREATE USER sei WITH PASSWORD 'sei'; END IF; END \$\$;"
            psql -U postgres -c "DROP DATABASE IF EXISTS sei;" || true
            psql -U postgres -c "CREATE DATABASE sei OWNER sei;"
            psql -U postgres -d sei -c "GRANT ALL PRIVILEGES ON SCHEMA public TO sei;"

            # Set environment variables
            cd $DEPLOY_DIR
            cat > .env << 'EOD'
            PORT=9000
            DATABASE_URL="postgresql://sei:sei@127.0.0.1:5432/sei?schema=public"
            CLIENT_ENDPOINT="https://seiinstitute.com"
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            ACCESS_TOKEN_EXPIRES="1d"
            REFRESH_TOKEN_EXPIRES="7d"
            NODE_ENV="production"
            HUGGING_FACE_KEY="${{ secrets.HUGGING_FACE_KEY }}"
            API_URL="https://api.seiinstitute.com"
            EOD

            # Install dependencies
            npm ci

            # Ensure Prisma schema is present
            if [ ! -f "$DEPLOY_DIR/prisma/schema.prisma" ]; then
              echo "Error: schema.prisma not found in $DEPLOY_DIR/prisma/"
              exit 1
            fi

            # Run Prisma commands
            npx prisma generate --schema=$DEPLOY_DIR/prisma/schema.prisma
            npx prisma migrate deploy --schema=$DEPLOY_DIR/prisma/schema.prisma

            # Configure Nginx for API
            cat > /etc/nginx/sites-available/api.seiinstitute.com << 'EOD'
            server {
                listen 80;
                server_name api.seiinstitute.com;

                location / {
                    proxy_pass http://localhost:9000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOD
            ln -sf /etc/nginx/sites-available/api.seiinstitute.com /etc/nginx/sites-enabled/
            nginx -t && systemctl restart nginx

            # Build and start backend with PM2
            npm run build
            if [ ! -f "$DEPLOY_DIR/build/server.js" ]; then
              echo "Error: build/server.js not found after build"
              ls -la $DEPLOY_DIR/build
              exit 1
            fi
            if ! command -v pm2 &> /dev/null; then
              npm install -g pm2
            fi
            pm2 delete backend || true
            pm2 start $DEPLOY_DIR/build/server.js --name backend
            pm2 save
            pm2 startup systemd -u root --hp /root

            # Install Certbot and configure SSL
            if ! command -v certbot &> /dev/null; then
              apt-get update
              apt-get install -y certbot python3-certbot-nginx
            fi
            certbot --nginx -d api.seiinstitute.com --non-interactive --agree-tos --email your-email@example.com
            nginx -t && systemctl restart nginx

            echo "Backend deployment with SSL completed!"
