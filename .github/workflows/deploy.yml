name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format:check

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file from secrets
        run: |
          cat > .env << EOL
          PORT=${{ secrets.BACKEND_PORT }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          CLIENT_ENDPOINT=${{ secrets.CLIENT_ENDPOINT }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ACCESS_TOKEN_EXPIRES=${{ secrets.ACCESS_TOKEN_EXPIRES }}
          REFRESH_TOKEN_EXPIRES=${{ secrets.REFRESH_TOKEN_EXPIRES }}
          NODE_ENV=production
          POSTGRES_HOST_AUTH_METHOD=${{ secrets.POSTGRES_HOST_AUTH_METHOD }}
          HUGGING_FACE_KEY=${{ secrets.HUGGING_FACE_KEY }}
          API_URL=${{ secrets.API_URL }}
          EOL

      - name: Build
        run: npm run build

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r build deploy/
          cp -r prisma deploy/
          cp package.json deploy/
          cp package-lock.json deploy/
          cp .env deploy/
          tar -czf backend-deploy.tar.gz -C deploy .

      - name: Deploy to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: 'backend-deploy.tar.gz'
          target: '/tmp'

      - name: Extract and setup on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Create directory if not exists
            mkdir -p /var/www/sei-institute/backend

            # Extract deployment package
            tar -xzf /tmp/backend-deploy.tar.gz -C /var/www/sei-institute/backend

            # Install production dependencies
            cd /var/www/sei-institute/backend
            npm ci --production

            # Run database migrations
            npm run prisma:deploy

            # Setup or restart PM2
            if pm2 list | grep -q "backend-app"; then
              pm2 restart backend-app
            else
              pm2 start build/server.js --name backend-app
              pm2 save
            fi

            # Cleanup
            rm /tmp/backend-deploy.tar.gz
