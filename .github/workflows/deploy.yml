name: Deploy Backend

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate .env file from secrets
        run: |
          # Create .env file from secrets
          echo "DATABASE_URL=${{ secrets.BACKEND_DATABASE_URL }}" > .env.production
          echo "JWT_SECRET=${{ secrets.BACKEND_JWT_SECRET }}" >> .env.production
          echo "PORT=${{ secrets.BACKEND_PORT || '3333' }}" >> .env.production
          echo "NODE_ENV=production" >> .env.production
          # Add other environment variables as needed
          echo "API_URL=${{ secrets.BACKEND_API_URL }}" >> .env.production
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env.production

          # Display .env file content (without sensitive data)
          echo "Generated .env.production file (with sensitive data masked):"
          cat .env.production | sed 's/=.*/=********/'

      - name: Build application
        run: npm run build

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Setup SSH directory and disable StrictHostKeyChecking
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Deploy to server
        env:
          SERVER_PASSWORD: gkjaRhMActfMatPW7nvd
        run: |
          # Create a temporary deployment directory
          sshpass -p "$SERVER_PASSWORD" ssh root@37.27.247.208 'mkdir -p /tmp/backend-deploy'

          # Copy built files to server
          sshpass -p "$SERVER_PASSWORD" rsync -avz --delete ./build/ ./package.json ./package-lock.json ./prisma/ root@37.27.247.208:/tmp/backend-deploy/

          # Copy .env.production file
          sshpass -p "$SERVER_PASSWORD" rsync -avz ./.env.production root@37.27.247.208:/tmp/backend-deploy/

          # Write the service file to a local temp file
          cat > backend.service << 'EOL'
          [Unit]
          Description=SEI Institute Backend Service
          After=network.target

          [Service]
          User=root
          WorkingDirectory=/opt/sei-institute/backend
          ExecStart=/usr/bin/npm start
          Restart=always
          Environment=NODE_ENV=production

          [Install]
          WantedBy=multi-user.target
          EOL

          # Copy the service file to the server
          sshpass -p "$SERVER_PASSWORD" scp backend.service root@37.27.247.208:/tmp/backend.service

          # Deploy on server
          sshpass -p "$SERVER_PASSWORD" ssh root@37.27.247.208 '
            cd /tmp/backend-deploy && 
            npm ci --production && 
            npx prisma generate && 
            [ -f /etc/systemd/system/backend.service ] && systemctl stop backend || true && 
            mkdir -p /opt/sei-institute/backend && 
            rm -rf /opt/sei-institute/backend/* && 
            cp -r /tmp/backend-deploy/* /opt/sei-institute/backend/ && 
            cp /tmp/backend-deploy/.env.production /opt/sei-institute/backend/.env && 
            if [ ! -f /etc/systemd/system/backend.service ]; then 
              mv /tmp/backend.service /etc/systemd/system/backend.service
              systemctl daemon-reload
            fi && 
            systemctl enable backend && 
            systemctl start backend && 
            rm -rf /tmp/backend-deploy
          '

          # Clean up local temp file
          rm backend.service

      - name: Verify deployment
        env:
          SERVER_PASSWORD: gkjaRhMActfMatPW7nvd
        run: |
          # Wait for service to start
          sleep 5
          # Check if service is running
          sshpass -p "$SERVER_PASSWORD" ssh root@37.27.247.208 'systemctl status backend'
