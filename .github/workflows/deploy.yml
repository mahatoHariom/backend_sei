name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            # Create or update backend repository
            if [ ! -d "/var/www/sei-institute/backend" ]; then
              mkdir -p /var/www/sei-institute/backend
              git clone --single-branch --branch main https://github.com/${{ github.repository }}.git /var/www/sei-institute/tmp-repo
              cp -r /var/www/sei-institute/tmp-repo/backend/* /var/www/sei-institute/backend/
              cp -r /var/www/sei-institute/tmp-repo/backend/.* /var/www/sei-institute/backend/ 2>/dev/null || true
              rm -rf /var/www/sei-institute/tmp-repo
            else
              cd /var/www/sei-institute
              git clone --single-branch --branch main https://github.com/${{ github.repository }}.git /var/www/sei-institute/tmp-repo
              cp -r /var/www/sei-institute/tmp-repo/backend/* /var/www/sei-institute/backend/
              cp -r /var/www/sei-institute/tmp-repo/backend/.* /var/www/sei-institute/backend/ 2>/dev/null || true
              rm -rf /var/www/sei-institute/tmp-repo
            fi

            # Ensure prisma directory exists and contains schema file
            if [ ! -d "/var/www/sei-institute/backend/prisma" ]; then
              echo "Creating prisma directory..."
              mkdir -p /var/www/sei-institute/backend/prisma
            fi

            echo "Checking Prisma schema file..."
            if [ ! -f "/var/www/sei-institute/backend/prisma/schema.prisma" ]; then
              echo "ERROR: Prisma schema file not found!"
              echo "Current backend directory contents:"
              ls -la /var/www/sei-institute/backend
              
              echo "Checking for schema file in repository..."
              find /var/www/sei-institute/backend -name "schema.prisma" -type f
              
              echo "The deployment cannot proceed without the Prisma schema file."
              exit 1
            fi

            # Setup PostgreSQL database and user (with password auth method)
            if command -v psql &> /dev/null; then
              echo "Configuring PostgreSQL..."
              
              # Ensure PostgreSQL is using password authentication
              # Backup pg_hba.conf first
              sudo cp /etc/postgresql/*/main/pg_hba.conf /etc/postgresql/*/main/pg_hba.conf.bak || true
              
              # Create user with password if it doesn't exist
              echo "Creating PostgreSQL user 'sei'..."
              sudo -u postgres psql -c "CREATE USER sei WITH PASSWORD 'sei';" 2>/dev/null || true
              sudo -u postgres psql -c "ALTER USER sei WITH PASSWORD 'sei';" 2>/dev/null || true
              
              # Create database (drop if exists already)
              echo "Creating 'sei' database..."
              sudo -u postgres psql -c "DROP DATABASE IF EXISTS sei;" || true
              sudo -u postgres psql -c "CREATE DATABASE sei;" || true
              
              # Grant privileges
              echo "Setting up database permissions..."
              sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sei TO sei;" || true
              sudo -u postgres psql -d sei -c "GRANT ALL PRIVILEGES ON SCHEMA public TO sei;" || true
              sudo -u postgres psql -d sei -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO sei;" || true
              sudo -u postgres psql -d sei -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO sei;" || true
              sudo -u postgres psql -d sei -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO sei;" || true
              sudo -u postgres psql -d sei -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO sei;" || true
              
              # Clear any duplicate entries in pg_hba.conf by writing a new one
              cat > /tmp/pg_hba.conf <<EOF
            # TYPE  DATABASE        USER            ADDRESS                 METHOD
            local   all             postgres                                peer
            local   all             sei                                     md5
            host    all             sei             127.0.0.1/32            md5
            host    all             sei             ::1/128                 md5
            local   all             all                                     peer
            host    all             all             127.0.0.1/32            md5
            host    all             all             ::1/128                 md5
            EOF
              
              sudo cp /tmp/pg_hba.conf /etc/postgresql/*/main/pg_hba.conf || true
              sudo service postgresql restart
              
              # Test the connection
              echo "Testing PostgreSQL connection..."
              PGPASSWORD=sei psql -U sei -h 127.0.0.1 -c "\l" sei || {
                echo "PostgreSQL connection test failed. Check pg_hba.conf settings."
                sudo cat /etc/postgresql/*/main/pg_hba.conf
              }
            fi

            # Create Nginx configuration for API subdomain if it doesn't exist
            if [ ! -f "/etc/nginx/sites-available/api.seiinstitute.com" ]; then
              cat > /etc/nginx/sites-available/api.seiinstitute.com <<'EOD'
            server {
                listen 80;
                server_name api.seiinstitute.com;

                location / {
                    proxy_pass http://localhost:9000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOD
              
              # Enable the site and restart nginx
              ln -sf /etc/nginx/sites-available/api.seiinstitute.com /etc/nginx/sites-enabled/
              nginx -t && systemctl restart nginx
            fi

            # Set environment variables with database credentials
            cat > /var/www/sei-institute/backend/.env <<'EOD'
            PORT=9000
            DATABASE_URL="postgresql://sei:sei@127.0.0.1:5432/sei?schema=public"
            CLIENT_ENDPOINT="https://seiinstitute.com"
            JWT_SECRET="mahatohariomsfadfnasldkjf"
            ACCESS_TOKEN_EXPIRES="1d"
            REFRESH_TOKEN_EXPIRES="7d"
            NODE_ENV="production"
            HUGGING_FACE_KEY="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"
            API_URL="http://api.seiinstitute.com"
            EOD

            # Install dependencies
            cd /var/www/sei-institute/backend
            echo "Installing dependencies..."
            npm ci

            # Run Prisma commands with explicit schema path
            cd /var/www/sei-institute/backend
            echo "Generating Prisma client..."
            npx prisma generate --schema=./prisma/schema.prisma || {
              echo "Prisma generate failed. Contents of prisma directory:"
              ls -la ./prisma/
              cat ./prisma/schema.prisma || echo "schema.prisma file not found or not readable"
              exit 1
            }

            # Force reset database on first run or migration issues
            if [ ! -f "/var/www/sei-institute/backend/.migration_done" ]; then
              echo "Performing initial migration..."
              npx prisma migrate reset --force --schema=./prisma/schema.prisma || {
                echo "Prisma migration reset failed"
                exit 1
              }
              touch /var/www/sei-institute/backend/.migration_done
            else
              echo "Running regular migration..."
              npx prisma migrate deploy --schema=./prisma/schema.prisma || {
                echo "Prisma migration deploy failed"
                exit 1
              }
            fi

            # Build the application
            echo "Building application..."
            npm run build

            # Restart or start the backend with PM2
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            echo "Deploying with PM2..."
            cd /var/www/sei-institute/backend

            # Check if server.js exists
            if [ ! -f "./build/server.js" ]; then
              echo "ERROR: build/server.js file not found!"
              echo "Contents of build directory:"
              ls -la ./build/ || echo "build directory doesn't exist"
              exit 1
            fi

            pm2 describe backend > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              echo "Restarting backend service..."
              pm2 restart backend
            else
              echo "Starting backend service..."
              pm2 start build/server.js --name backend
            fi
            pm2 save

            # Verify deployment
            echo "Checking backend status..."
            pm2 status
            echo "Verifying database connection..."
            npx prisma db pull --schema=./prisma/schema.prisma --force || true

            echo "Deployment completed successfully!"
