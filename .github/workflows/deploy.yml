name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Verify backend directory exists
      - name: Check directory structure
        run: |
          ls -la
          if [ ! -d "backend" ]; then
            echo "Error: backend directory not found in repository root"
            exit 1
          fi
          echo "Repository structure verified. Backend directory exists."

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install Dependencies
        run: |
          cd backend
          npm ci

      - name: Build
        run: |
          cd backend
          npm run build

      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            echo "==== Starting deployment ===="

            # Create or update backend repository
            if [ ! -d "/var/www/sei-institute/backend" ]; then
              echo "Creating backend directory..."
              mkdir -p /var/www/sei-institute/backend
            fi

            echo "Cloning repository..."
            git clone --single-branch --branch main https://github.com/${{ github.repository }}.git /var/www/sei-institute/tmp-repo

            echo "Checking repository structure..."
            if [ ! -d "/var/www/sei-institute/tmp-repo/backend" ]; then
              echo "ERROR: backend directory not found in repository!"
              ls -la /var/www/sei-institute/tmp-repo
              exit 1
            fi

            echo "Copying backend files..."
            cp -rf /var/www/sei-institute/tmp-repo/backend/* /var/www/sei-institute/backend/

            # Copy hidden files too
            cp -rf /var/www/sei-institute/tmp-repo/backend/.??* /var/www/sei-institute/backend/ 2>/dev/null || echo "No hidden files to copy"

            echo "Cleaning up temporary repository..."
            rm -rf /var/www/sei-institute/tmp-repo

            echo "Checking backend directory contents..."
            ls -la /var/www/sei-institute/backend

            # Ensure prisma directory exists
            if [ ! -d "/var/www/sei-institute/backend/prisma" ]; then
              echo "ERROR: Prisma directory not found!"
              exit 1
            fi

            # Check for schema.prisma file
            if [ ! -f "/var/www/sei-institute/backend/prisma/schema.prisma" ]; then
              echo "ERROR: schema.prisma file not found!"
              find /var/www/sei-institute/backend -name "schema.prisma" -type f
              exit 1
            fi

            echo "Prisma schema file found. Continuing deployment..."

            # Setup PostgreSQL with proper authentication
            if command -v psql &> /dev/null; then
              echo "Configuring PostgreSQL..."
              
              # Create database user
              echo "Setting up PostgreSQL user..."
              sudo -u postgres psql -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'sei') THEN CREATE USER sei WITH PASSWORD 'sei'; ELSE ALTER USER sei WITH PASSWORD 'sei'; END IF; END \$\$;" || echo "Error creating user, continuing..."
              
              # Create database
              echo "Creating PostgreSQL database..."
              sudo -u postgres psql -c "DROP DATABASE IF EXISTS sei;" || echo "Error dropping database, continuing..."
              sudo -u postgres psql -c "CREATE DATABASE sei;" || echo "Error creating database, continuing..."
              
              # Grant privileges
              echo "Setting up database permissions..."
              sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sei TO sei;" || echo "Error granting database permissions, continuing..."
              sudo -u postgres psql -d sei -c "GRANT ALL PRIVILEGES ON SCHEMA public TO sei;" || echo "Error granting schema permissions, continuing..."
              
              # Update PostgreSQL authentication config
              echo "Updating PostgreSQL authentication configuration..."
              sudo bash -c "cat > /etc/postgresql/*/main/pg_hba.conf << 'EOF'
            # Database administrative login by Unix domain socket
            local   all             postgres                                peer

            # TYPE  DATABASE        USER            ADDRESS                 METHOD
            # Allow sei user to connect with password
            local   all             sei                                     md5
            host    all             sei             127.0.0.1/32            md5
            host    all             sei             ::1/128                 md5

            # "local" is for Unix domain socket connections only
            local   all             all                                     peer
            # IPv4 local connections:
            host    all             all             127.0.0.1/32            md5
            # IPv6 local connections:
            host    all             all             ::1/128                 md5
            # Allow replication connections from localhost, by a user with the
            # replication privilege.
            local   replication     all                                     peer
            host    replication     all             127.0.0.1/32            md5
            host    replication     all             ::1/128                 md5
            EOF"
              
              echo "Restarting PostgreSQL..."
              sudo service postgresql restart
            else
              echo "WARNING: PostgreSQL not found on server!"
            fi

            # Create Nginx configuration
            echo "Setting up Nginx configuration..."
            if [ ! -f "/etc/nginx/sites-available/api.seiinstitute.com" ]; then
              cat > /etc/nginx/sites-available/api.seiinstitute.com <<'EOD'
            server {
                listen 80;
                server_name api.seiinstitute.com;

                location / {
                    proxy_pass http://localhost:9000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOD
              
              # Enable the site and restart nginx
              ln -sf /etc/nginx/sites-available/api.seiinstitute.com /etc/nginx/sites-enabled/
              nginx -t && systemctl restart nginx
            fi

            # Set environment variables
            echo "Setting up environment variables..."
            cat > /var/www/sei-institute/backend/.env <<'EOD'
            PORT=9000
            DATABASE_URL="postgresql://sei:sei@127.0.0.1:5432/sei?schema=public"
            CLIENT_ENDPOINT="https://seiinstitute.com"
            JWT_SECRET="mahatohariomsfadfnasldkjf"
            ACCESS_TOKEN_EXPIRES="1d"
            REFRESH_TOKEN_EXPIRES="7d"
            NODE_ENV="production"
            HUGGING_FACE_KEY="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"
            API_URL="http://api.seiinstitute.com"
            EOD

            # Install dependencies
            echo "Installing backend dependencies..."
            cd /var/www/sei-institute/backend
            npm ci

            # Generate Prisma client
            echo "Generating Prisma client..."
            cd /var/www/sei-institute/backend
            npx prisma generate --schema=./prisma/schema.prisma || {
              echo "ERROR: Failed to generate Prisma client"
              cat ./prisma/schema.prisma || echo "Cannot read schema.prisma"
              exit 1
            }

            # Run database migrations
            if [ ! -f "/var/www/sei-institute/backend/.migration_done" ]; then
              echo "Performing initial database migration..."
              npx prisma migrate reset --force --schema=./prisma/schema.prisma || {
                echo "ERROR: Failed to reset database"
                exit 1
              }
              touch /var/www/sei-institute/backend/.migration_done
            else
              echo "Running database migrations..."
              npx prisma migrate deploy --schema=./prisma/schema.prisma || {
                echo "ERROR: Failed to run migrations"
                exit 1
              }
            fi

            # Build application
            echo "Building application..."
            cd /var/www/sei-institute/backend
            npm run build

            # Verify build output
            echo "Verifying build output..."
            if [ ! -d "/var/www/sei-institute/backend/build" ]; then
              echo "ERROR: Build directory not found!"
              exit 1
            fi

            if [ ! -f "/var/www/sei-institute/backend/build/server.js" ]; then
              echo "ERROR: server.js not found in build directory!"
              ls -la /var/www/sei-institute/backend/build
              exit 1
            fi

            # Start with PM2
            echo "Deploying with PM2..."
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            cd /var/www/sei-institute/backend

            # Check if app is already running
            if pm2 list | grep -q "backend"; then
              echo "Restarting backend service..."
              pm2 restart backend
            else
              echo "Starting backend service..."
              pm2 start build/server.js --name backend
            fi

            echo "Saving PM2 configuration..."
            pm2 save

            echo "Checking backend status..."
            pm2 status

            echo "Verifying database connection..."
            npx prisma db pull --schema=./prisma/schema.prisma || echo "Database verification warning (non-fatal)"

            echo "==== Deployment completed successfully! ===="
