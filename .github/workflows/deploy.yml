name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Archive Build
        run: tar -czf backend.tar.gz build package.json package-lock.json prisma src

      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            echo "==== Starting Backend Deployment ===="

            # 1. Clean up existing backend
            pm2 stop backend || true
            pm2 delete backend || true
            rm -rf /var/www/sei-institute/backend

            # 2. Create necessary directories
            mkdir -p /var/www/sei-institute/backend

            # 3. Install required packages
            apt-get update -y
            apt-get install -y postgresql-16 nginx

            # 4. Initialize PostgreSQL cluster if not already done
            echo "Setting up PostgreSQL..."
            if [ ! -d "/var/lib/postgresql/16/main" ] || [ ! -f "/etc/postgresql/16/main/postgresql.conf" ]; then
              echo "Initializing PostgreSQL cluster..."
              mkdir -p /var/lib/postgresql/16/main
              mkdir -p /etc/postgresql/16/main
              chown -R postgres:postgres /var/lib/postgresql /etc/postgresql
              sudo -u postgres /usr/lib/postgresql/16/bin/initdb -D /var/lib/postgresql/16/main
              cp /var/lib/postgresql/16/main/*.conf /etc/postgresql/16/main/
              sed -i "s|^#data_directory.*|data_directory = '/var/lib/postgresql/16/main'|" /etc/postgresql/16/main/postgresql.conf
              sed -i "s|^#listen_addresses.*|listen_addresses = 'localhost'|" /etc/postgresql/16/main/postgresql.conf
              systemctl daemon-reload
              systemctl start postgresql@16-main || { echo "❌ Failed to start PostgreSQL"; exit 1; }
              systemctl enable postgresql@16-main
              echo "✅ PostgreSQL cluster initialized."
            else
              echo "PostgreSQL cluster already exists."
              systemctl restart postgresql@16-main || systemctl start postgresql@16-main
            fi

            # Verify PostgreSQL is running
            if systemctl is-active postgresql@16-main >/dev/null; then
              echo "✅ PostgreSQL is running."
            else
              echo "❌ PostgreSQL failed to start!"
              journalctl -u postgresql@16-main -n 20
              exit 1
            fi

            # 5. Setup PostgreSQL user and database
            echo "Setting up PostgreSQL user and database..."
            sudo -u postgres psql -c "DROP ROLE IF EXISTS sei;" 2>/dev/null || true
            sudo -u postgres psql -c "CREATE ROLE sei WITH LOGIN PASSWORD 'sei' CREATEDB;" 2>/dev/null || true
            sudo -u postgres psql -c "DROP DATABASE IF EXISTS sei;" 2>/dev/null || true
            sudo -u postgres psql -c "CREATE DATABASE sei OWNER sei;" 2>/dev/null || sudo -u postgres createdb -O sei sei
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sei TO sei;"

            # Verify database creation
            if sudo -u postgres psql -l | grep -q sei; then
              echo "✅ Database 'sei' created successfully."
            else
              echo "❌ Failed to create database 'sei'."
              sudo -u postgres psql -c "\l"
              exit 1
            fi

            # Configure PostgreSQL authentication
            PG_HBA_PATH=$(find /etc/postgresql -name "pg_hba.conf" | head -n 1)
            if [ -f "$PG_HBA_PATH" ]; then
              if ! grep -q "local.*sei.*md5" "$PG_HBA_PATH"; then
                echo "local   all   sei   md5" >> "$PG_HBA_PATH"
              fi
              if ! grep -q "host.*sei.*127.0.0.1/32.*md5" "$PG_HBA_PATH"; then
                echo "host    all   sei   127.0.0.1/32   md5" >> "$PG_HBA_PATH"
              fi
              systemctl restart postgresql@16-main
              echo "✅ PostgreSQL authentication configured."
            else
              echo "❌ Could not find pg_hba.conf."
              exit 1
            fi

            # 6. Setup Nginx
            cat > /etc/nginx/sites-available/api.seiinstitute.com <<'EOF'
            server {
                listen 80;
                server_name api.seiinstitute.com;
                
                location / {
                    proxy_pass http://localhost:9000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                }
            }
            EOF
            rm -f /etc/nginx/sites-enabled/default
            ln -sf /etc/nginx/sites-available/api.seiinstitute.com /etc/nginx/sites-enabled/
            nginx -t && systemctl restart nginx || { echo "❌ Nginx configuration failed"; exit 1; }
            echo "✅ Nginx configured."

            # 7. Setup environment
            cat > /var/www/sei-institute/backend/.env <<'EOF'
            PORT=9000
            DATABASE_URL="postgresql://sei:sei@127.0.0.1:5432/sei?schema=public"
            CLIENT_ENDPOINT="https://seiinstitute.com"
            JWT_SECRET="mahatohariomsfadfnasldkjf"
            NODE_ENV="production"
            API_URL="http://api.seiinstitute.com"
            EOF
            echo "✅ Environment variables set."

            # 8. Install Node.js and PM2
            if ! command -v node &> /dev/null; then
              echo "Installing Node.js and PM2..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
              npm install -g pm2
              echo "✅ Node.js and PM2 installed."
            else
              echo "Node.js already installed."
              npm install -g pm2 --force
            fi

            # 9. Prepare for application files
            echo "Preparing for application deployment..."

      - name: Transfer Build Files
        if: github.ref == 'refs/heads/main'
        uses: appleboy/scp-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          source: 'backend.tar.gz'
          target: '/var/www/sei-institute/backend'

      - name: Finalize Deployment
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            cd /var/www/sei-institute/backend
            echo "Extracting application files..."
            tar -xzf backend.tar.gz
            rm backend.tar.gz

            # Check file structure
            echo "Checking file structure..."
            if [ -d "prisma" ] && [ -f "prisma/schema.prisma" ]; then
              echo "✅ Prisma directory and schema.prisma found."
              ls -la prisma/
            else
              echo "❌ Prisma directory or schema.prisma not found!"
              ls -la
              exit 1
            fi

            # Install minimal dependencies for Prisma
            echo "Installing Prisma dependencies..."
            npm install prisma @prisma/client dotenv --no-save

            # Generate Prisma client
            echo "Generating Prisma client..."
            npx prisma generate || { echo "❌ Prisma generate failed"; cat prisma/schema.prisma; exit 1; }

            # Handle migrations
            echo "Handling database migrations..."
            if [ -d "prisma/migrations" ] && [ -n "$(ls -A prisma/migrations)" ]; then
              echo "Applying existing migrations..."
              npx prisma migrate deploy || { echo "❌ Migrate deploy failed"; exit 1; }
            else
              echo "No migrations found. Creating initial migration..."
              npx prisma migrate dev --name init --create-only || { echo "❌ Migrate dev failed"; cat prisma/schema.prisma; exit 1; }
              npx prisma migrate deploy || { echo "❌ Migrate deploy failed after init"; exit 1; }
            fi

            # Verify database schema
            echo "Verifying database schema..."
            npx prisma db pull --force > schema_check.txt 2>&1
            if grep -q "Error" schema_check.txt; then
              echo "❌ Database schema verification failed!"
              cat schema_check.txt
              exit 1
            else
              echo "✅ Database schema verified."
            fi

            # Run seed if available
            if [ -f "prisma/seed.js" ] || [ -f "prisma/seed.ts" ]; then
              echo "Found seed file. Running database seeding..."
              if grep -q "\"prisma\": {" package.json && grep -q "\"seed\":" package.json; then
                echo "Running seed command from package.json..."
                npx prisma db seed || { echo "❌ Seeding failed"; exit 1; }
              else
                echo "Executing seed file directly..."
                if [ -f "prisma/seed.js" ]; then
                  node prisma/seed.js || { echo "❌ Seed.js failed"; exit 1; }
                else
                  npm install ts-node --no-save
                  npx ts-node prisma/seed.ts || { echo "❌ Seed.ts failed"; exit 1; }
                fi
              fi
              echo "✅ Database seeded."
            else
              echo "⚠️ No seed file found. Database is not seeded."
            fi

            # Start with PM2
            echo "Starting application with PM2..."
            pm2 describe backend > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              pm2 restart backend
            else
              pm2 start npm --name backend -- start
            fi
            pm2 save

            # Verify application is running
            echo "Verifying application is running..."
            sleep 5
            if pm2 show backend | grep -q "online"; then
              echo "✅ Application is running."
            else
              echo "❌ Application failed to start!"
              pm2 logs backend --lines 20
              exit 1
            fi

            echo "==== Backend Deployment Complete ===="
            echo "Try accessing http://api.seiinstitute.com/api/v1/admin/carousels"
