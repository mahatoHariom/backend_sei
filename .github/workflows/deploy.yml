name: Deploy Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to Server
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: 37.27.247.208
          username: root
          password: gkjaRhMActfMatPW7nvd
          script: |
            echo "==== Starting Minimal VPS Setup ===="

            # 1. Create necessary directories
            mkdir -p /var/www/sei-institute/backend/prisma
            mkdir -p /var/www/sei-institute/backend/src

            # 2. Install required packages (if needed)
            apt-get update
            apt-get install -y postgresql nginx

            # 3. Setup PostgreSQL - Fix for password prompt loop
            # First, set postgres user password to 'mahato'
            echo "Setting postgres user password..."
            sudo -i -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'mahato';"
            
            # Create application database user
            echo "Creating application database user..."
            sudo -i -u postgres psql -c "CREATE USER sei WITH PASSWORD 'mahato';" 2>/dev/null || sudo -i -u postgres psql -c "ALTER USER sei WITH PASSWORD 'mahato';" 2>/dev/null
            
            # Create database
            echo "Creating database..."
            sudo -i -u postgres psql -c "DROP DATABASE IF EXISTS sei;" 2>/dev/null || true
            sudo -i -u postgres psql -c "CREATE DATABASE sei;" 2>/dev/null || sudo -i -u postgres createdb sei
            
            # Grant privileges
            echo "Setting database privileges..."
            sudo -i -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sei TO sei;" 2>/dev/null || true

            # Configure PostgreSQL authentication without appending duplicate entries
            echo "Configuring PostgreSQL authentication..."
            PG_HBA_PATH=$(find /etc/postgresql -name "pg_hba.conf" | head -n 1)
            if [ -f "$PG_HBA_PATH" ]; then
              # Back up original file
              cp "$PG_HBA_PATH" "${PG_HBA_PATH}.backup"
              
              # Create new configuration
              cat > "$PG_HBA_PATH" <<'EOF'
# PostgreSQL Client Authentication Configuration File
# Database administrative login by Unix domain socket
local   all             postgres                                peer
# TYPE  DATABASE        USER            ADDRESS                 METHOD
# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            md5
# IPv6 local connections:
host    all             all             ::1/128                 md5
# Allow sei user with password
local   all             sei                                     md5
host    all             sei             127.0.0.1/32            md5
EOF
              
              # Restart PostgreSQL to apply changes
              systemctl restart postgresql
              echo "PostgreSQL configuration updated and service restarted."
            fi

            # 4. Setup Nginx
            cat > /etc/nginx/sites-available/api.seiinstitute.com <<'EOF'
            server {
                listen 80;
                server_name api.seiinstitute.com;
                
                location / {
                    proxy_pass http://localhost:9000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                }
            }
            EOF

            ln -sf /etc/nginx/sites-available/api.seiinstitute.com /etc/nginx/sites-enabled/
            nginx -t && systemctl restart nginx

            # 5. Setup environment
            cat > /var/www/sei-institute/backend/.env <<'EOF'
            PORT=9000
            DATABASE_URL="postgresql://sei:mahato@127.0.0.1:5432/sei?schema=public"
            CLIENT_ENDPOINT="https://seiinstitute.com"
            JWT_SECRET="mahatohariomsfadfnasldkjf"
            NODE_ENV="production"
            API_URL="http://api.seiinstitute.com"
            EOF

            # 6. Setup Node.js (if needed)
            if ! command -v node &> /dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
              apt-get install -y nodejs
              npm install -g pm2
            fi

            # 7. Create minimal schema.prisma file
            cat > /var/www/sei-institute/backend/prisma/schema.prisma <<'EOF'
            datasource db {
              provider = "postgresql"
              url      = env("DATABASE_URL")
            }
            
            generator client {
              provider = "prisma-client-js"
            }
            EOF

            # 8. Deploy application
            cd /var/www/sei-institute/backend

            # Install dependencies
            npm install prisma @prisma/client fastify dotenv

            # Generate Prisma client
            npx prisma generate

            # Start with PM2
            pm2 describe backend > /dev/null 2>&1
            if [ $? -eq 0 ]; then
              pm2 restart backend
            else
              pm2 start npm --name backend -- start
            fi

            pm2 save

            echo "==== Minimal VPS Setup Complete ===="
