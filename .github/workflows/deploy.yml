name: Deploy Backend to Production

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy backend setup scripts to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Create temporary directory for deployment scripts
          mkdir -p deploy_scripts/backend

          # Copy Dockerfile to the temporary directory
          cp backend/Dockerfile deploy_scripts/backend/

          # Upload the setup scripts to the server
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "mkdir -p /root/backend"
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r deploy_scripts/backend/* root@$SERVER_IP:/root/backend/

          echo "Backend deployment scripts uploaded successfully."

      - name: Run initial server setup (if needed)
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Check if /sei directory exists, if not run initial setup
          SET_UP_SERVER=$(sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "[ ! -d /sei ] && echo 'true' || echo 'false'")

          if [ "$SET_UP_SERVER" = "true" ]; then
            echo "Performing initial server setup..."
            sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd /root/client && ./server-deploy.sh"
          else
            echo "Server already set up, skipping initial setup."
          fi

      - name: Deploy backend code
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Create deployment directory
          mkdir -p deploy/backend

          # Copy files to deployment directory
          cp -r backend/* deploy/backend/

          # Upload backend code to server
          sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r deploy/backend/* root@$SERVER_IP:/sei/backend/

          echo "Backend code deployed successfully."

      - name: Update environment variables
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          # Update environment variables
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cat > /sei/.env << EOF
          # Database Configuration
          POSTGRES_USER=$POSTGRES_USER
          POSTGRES_PASSWORD=$POSTGRES_PASSWORD
          POSTGRES_DB=$POSTGRES_DB
          DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB

          # JWT Configuration
          JWT_SECRET=$JWT_SECRET

          # Application Ports
          BACKEND_PORT=9000
          FRONTEND_PORT=3000
          EOF"

          echo "Environment variables updated successfully."

      - name: Rebuild and restart backend service
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Rebuild and restart backend service and database
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd /sei && docker-compose build --no-cache backend db"
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd /sei && docker-compose up -d backend db"

          # Run database migrations
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd /sei && docker-compose exec -T backend npx prisma migrate deploy || true"

          echo "Backend service rebuilt and restarted successfully."

      - name: Verify backend deployment
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
        run: |
          # Check container status
          echo "Checking backend container status..."
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "cd /sei && docker-compose ps backend db"

          echo "======================================"
          echo "Backend deployment completed successfully!"
          echo "API: https://api.seiinstitute.com"
          echo "======================================"
